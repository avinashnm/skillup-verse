PHP Arrays - Basic Access
Arrays in PHP:

Arrays in PHP are versatile data structures used to store multiple values in a single variable.
They can hold various data types, including integers, strings, floats, and even other arrays.
Arrays in PHP can be indexed numerically or associatively, providing flexibility in data organization.
Basic Access:

Accessing elements in an array involves specifying the array name followed by the index within square brackets [ ].
Numeric indices start from 0, while associative indices are user-defined keys.
Syntax:
php
Copy code
$arrayName[index];
Example:
php
Copy code
$fruits = array("apple", "banana", "orange");
echo $fruits[0]; // Output: apple
echo $fruits[2]; // Output: orange

$person = array("name" => "John", "age" => 30, "city" => "New York");
echo $person["name"]; // Output: John
echo $person["age"]; // Output: 30
Adding Elements:

Elements can be added to an array by assigning a value to a new index.
Syntax:
php
Copy code
$arrayName[index] = value;
Example:
php
Copy code
$fruits = array();
$fruits[0] = "apple";
$fruits[1] = "banana";
$fruits[2] = "orange";

$person = array();
$person["name"] = "John";
$person["age"] = 30;
$person["city"] = "New York";
Updating Elements:

Existing elements in an array can be updated by assigning a new value to their index.
Syntax:
php
Copy code
$arrayName[index] = newValue;
Example:
php
Copy code
$fruits = array("apple", "banana", "orange");
$fruits[1] = "grape";
Checking Existence:

To check if a specific index/key exists in an array, use the isset() function.
It returns true if the index/key exists and has a non-null value; otherwise, it returns false.
Syntax:
php
Copy code
isset($arrayName[index]);
Example:
php
Copy code
$fruits = array("apple", "banana", "orange");
if (isset($fruits[1])) {
    echo "Index 1 exists.";
} else {
    echo "Index 1 does not exist.";
}
Conclusion:

PHP arrays provide a powerful way to store and manipulate collections of data.
Basic access involves using square brackets [ ] to access elements by their index or key.
Understanding array indexing and key-value pairs is essential for effective data management in PHP applications.